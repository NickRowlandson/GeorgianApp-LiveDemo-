{"version":3,"sources":["../../client/app/services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAYI,qBAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAHvB,eAAU,GAAwB,IAAI,6BAAa,CAAC,CAAC,CAAC,CAAC;oBACvD,aAAQ,GAAwB,IAAI,6BAAa,CAAC,CAAC,CAAC,CAAC;oBAGxD,sCAAsC;oBACtC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClE,IAAI,CAAC,KAAK,GAAG,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC;oBAE9C,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;wBACxC,IAAI,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC;wBAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7C,CAAC;gBACL,CAAC;gBAED,2BAAK,GAAL,UAAM,QAAgB,EAAE,QAAgB;oBAAxC,iBA4BC;oBA3BG,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;oBAChE,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;oBAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,EAAC,OAAO,EAAC,OAAO,EAAC,CAAC;yBACjE,SAAS,EAAE;yBACX,IAAI,CAAC,UAAC,QAAkB;wBACvB,0DAA0D;wBAC1D,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;wBAChC,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;wBAC/D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACR,qBAAqB;4BACrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;4BAEnB,8FAA8F;4BAC9F,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;4BAE1D,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC;4BACxE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAE/C,2CAA2C;4BAC3C,MAAM,CAAC,IAAI,CAAC;wBACd,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,wCAAwC;4BACxC,MAAM,CAAC,KAAK,CAAC;wBACjB,CAAC;oBACL,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG;wBACX,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC;oBACtC,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,4BAAM,GAAN;oBACI,6DAA6D;oBAC7D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClB,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC/B,CAAC;gBAnDQ,WAAW;oBADvB,iBAAU,EAAE;qDAMiB,WAAI;mBALrB,WAAW,CAoDvB;gBAAD,kBAAC;aApDD,AAoDC;;QACD,CAAC","file":"authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    public token: string;\r\n    public loggedUser : ReplaySubject<any> = new ReplaySubject(1);\r\n    public userType : ReplaySubject<any> = new ReplaySubject(1);\r\n\r\n    constructor(private http: Http) {\r\n        // set token if saved in local storage\r\n        var currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n        this.token = currentUser && currentUser.token;\r\n\r\n        if (localStorage.getItem('currentUser')) {\r\n          var user = currentUser.username;\r\n          this.loggedUser.next(JSON.stringify(user));\r\n        }\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        var credentials = JSON.stringify({ username: username, password: password });\r\n        return this.http.post('/api/auth', credentials, {headers:headers})\r\n        .toPromise()\r\n        .then((response: Response) => {\r\n          // login successful if there's a jwt token in the response\r\n          var body = response.json().body;\r\n          let token = response.json().body && response.json().body.token;\r\n          if (token) {\r\n              // set token property\r\n              this.token = token;\r\n\r\n              // store username and jwt token in local storage to keep user logged in between page refreshes\r\n              localStorage.setItem('currentUser', JSON.stringify(body));\r\n\r\n              var username = JSON.parse(localStorage.getItem('currentUser')).username;\r\n              this.loggedUser.next(JSON.stringify(username));\r\n\r\n              // return true to indicate successful login\r\n              return true;\r\n            } else {\r\n                // return false to indicate failed login\r\n                return false;\r\n            }\r\n        }).catch((err) => {\r\n          console.log(\"Invalid login \" + err);\r\n        });\r\n    }\r\n\r\n    logout(): void {\r\n        // clear token remove user from local storage to log user out\r\n        this.token = null;\r\n        localStorage.removeItem('currentUser');\r\n        this.loggedUser.next(null);\r\n    }\r\n}\r\n"]}