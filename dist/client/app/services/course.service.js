"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var authentication_service_1 = require("./authentication.service");
require("rxjs/add/operator/toPromise");
var CourseService = (function () {
    function CourseService(http, authService) {
        this.http = http;
        this.authService = authService;
        this.usersUrl = 'api/course'; // URL to web app
    }
    CourseService.prototype.getCourse = function () {
        // add authorization header with jwt token
        var headers = new http_1.Headers({ authorization: this.authService.token });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.get(this.usersUrl, options)
            .toPromise()
            .then(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    return CourseService;
}());
CourseService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http,
        authentication_service_1.AuthService])
], CourseService);
exports.CourseService = CourseService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hcHAvc2VydmljZXMvY291cnNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBMkM7QUFDM0Msc0NBQXdFO0FBRXhFLG1FQUF1RDtBQUV2RCx1Q0FBcUM7QUFHckMsSUFBYSxhQUFhO0lBSXRCLHVCQUFvQixJQUFVLEVBQ1YsV0FBd0I7UUFEeEIsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUNWLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBSHBDLGFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBRSxpQkFBaUI7SUFHSCxDQUFDO0lBRWpELGlDQUFTLEdBQVQ7UUFDRSwwQ0FBMEM7UUFDMUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFPLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLElBQUksT0FBTyxHQUFHLElBQUkscUJBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQzthQUN2QyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQWlFTCxvQkFBQztBQUFELENBakZBLEFBaUZDLElBQUE7QUFqRlksYUFBYTtJQUR6QixpQkFBVSxFQUFFO3FDQUtpQixXQUFJO1FBQ0csb0NBQVc7R0FMbkMsYUFBYSxDQWlGekI7QUFqRlksc0NBQWEiLCJmaWxlIjoiYXBwL3NlcnZpY2VzL2NvdXJzZS5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIZWFkZXJzLCBIdHRwLCBSZXNwb25zZSwgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgQ291cnNlIH0gZnJvbSBcIi4uL21vZGVscy9jb3Vyc2VcIjtcclxuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcclxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci90b1Byb21pc2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ291cnNlU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSB1c2Vyc1VybCA9ICdhcGkvY291cnNlJzsgIC8vIFVSTCB0byB3ZWIgYXBwXHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UpIHsgfVxyXG5cclxuICAgIGdldENvdXJzZSgpOiBQcm9taXNlPENvdXJzZVtdPiB7XHJcbiAgICAgIC8vIGFkZCBhdXRob3JpemF0aW9uIGhlYWRlciB3aXRoIGp3dCB0b2tlblxyXG4gICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHsgYXV0aG9yaXphdGlvbjogdGhpcy5hdXRoU2VydmljZS50b2tlbiB9KTtcclxuICAgICAgbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy51c2Vyc1VybCwgb3B0aW9ucylcclxuICAgICAgICAgIC50b1Byb21pc2UoKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vZ2V0VXNlcihpZDogc3RyaW5nKSB7XHJcbiAgICAvLyAgLy8gYWRkIGF1dGhvcml6YXRpb24gaGVhZGVyIHdpdGggand0IHRva2VuXHJcbiAgICAvLyAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7IGF1dGhvcml6YXRpb246IHRoaXMuYXV0aFNlcnZpY2UudG9rZW4gfSk7XHJcbiAgICAvLyAgbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG5cclxuICAgIC8vICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnVzZXJzVXJsICsgJy8nICsgaWQsIG9wdGlvbnMpXHJcbiAgICAvLyAgICAgIC50b1Byb21pc2UoKVxyXG4gICAgLy8gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAvLyAgICAgIC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKTtcclxuICAgIC8vfVxyXG5cclxuICAgIC8vc2F2ZSh1c2VyOiBVc2VyKTogUHJvbWlzZTxVc2VyPiAge1xyXG4gICAgLy8gICAgaWYgKHVzZXIuc3RhZmZJRCkge1xyXG4gICAgLy8gICAgICAgIHJldHVybiB0aGlzLnB1dCh1c2VyKTtcclxuICAgIC8vICAgIH1cclxuICAgIC8vICAgIHJldHVybiB0aGlzLnBvc3QodXNlcik7XHJcbiAgICAvL31cclxuXHJcbiAgICAvL3ByaXZhdGUgcG9zdCh1c2VyOiBVc2VyKTogUHJvbWlzZTxVc2VyPiB7XHJcbiAgICAvLyAgLy8gYWRkIGF1dGhvcml6YXRpb24gaGVhZGVyIHdpdGggand0IHRva2VuXHJcbiAgICAvLyAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7IGF1dGhvcml6YXRpb246IHRoaXMuYXV0aFNlcnZpY2UudG9rZW4gfSk7XHJcbiAgICAvLyAgbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG5cclxuICAgIC8vICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAvLyAgICAgIC5wb3N0KHRoaXMudXNlcnNVcmwsIHVzZXIsIG9wdGlvbnMpXHJcbiAgICAvLyAgICAgIC50b1Byb21pc2UoKVxyXG4gICAgLy8gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkuZGF0YSlcclxuICAgIC8vICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gICAgLy99XHJcblxyXG4gICAgLy9wcml2YXRlIHB1dCh1c2VyOiBVc2VyKSB7XHJcbiAgICAvLyAgLy8gYWRkIGF1dGhvcml6YXRpb24gaGVhZGVyIHdpdGggand0IHRva2VuXHJcbiAgICAvLyAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7IGF1dGhvcml6YXRpb246IHRoaXMuYXV0aFNlcnZpY2UudG9rZW4gfSk7XHJcbiAgICAvLyAgbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xyXG5cclxuICAgIC8vICBsZXQgdXJsID0gYCR7dGhpcy51c2Vyc1VybH0vJHt1c2VyLnN0YWZmSUR9YDtcclxuICAgIC8vICBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgIC8vICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAvLyAgICAgIC5wdXQodXJsLCB1c2VyLCBvcHRpb25zKVxyXG4gICAgLy8gICAgICAudG9Qcm9taXNlKClcclxuICAgIC8vICAgICAgLnRoZW4oKCkgPT4gdXNlcilcclxuICAgIC8vICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gICAgLy99XHJcblxyXG4gICAgLy9kZWxldGUodXNlcjogVXNlcikge1xyXG4gICAgLy8gIC8vIGFkZCBhdXRob3JpemF0aW9uIGhlYWRlciB3aXRoIGp3dCB0b2tlblxyXG4gICAgLy8gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoeyBhdXRob3JpemF0aW9uOiB0aGlzLmF1dGhTZXJ2aWNlLnRva2VuIH0pO1xyXG4gICAgLy8gIGxldCBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHsgaGVhZGVyczogaGVhZGVycyB9KTtcclxuXHJcbiAgICAvLyAgLy9oZWFkZXJzLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuXHJcbiAgICAvLyAgbGV0IHVybCA9IGAke3RoaXMudXNlcnNVcmx9LyR7dXNlci51c2VySUR9YDtcclxuXHJcbiAgICAvLyAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgLy8gICAgICAuZGVsZXRlKHVybCwgb3B0aW9ucylcclxuICAgIC8vICAgICAgLnRvUHJvbWlzZSgpXHJcbiAgICAvLyAgICAgIC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKTtcclxuICAgIC8vfVxyXG5cclxuICAgIC8vcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XHJcbiAgICAvLyAgICBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJyZWQnLCBlcnJvcik7XHJcbiAgICAvLyAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IubWVzc2FnZSB8fCBlcnJvcik7XHJcbiAgICAvL31cclxufVxyXG4iXX0=
