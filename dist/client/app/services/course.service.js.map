{"version":3,"sources":["../../client/app/services/course.service.ts"],"names":[],"mappings":"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","file":"course.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http, Response, RequestOptions } from '@angular/http';\r\nimport { Course } from \"../models/course\";\r\nimport { AuthService } from './authentication.service';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n@Injectable()\r\nexport class CourseService {\r\n\r\n    private courseUrl = 'api/course';  // URL to web app\r\n\r\n    constructor(private http: Http,\r\n                private authService: AuthService) { }\r\n\r\n    getCourses(): Promise<Course[]> {\r\n      // add authorization header with jwt token\r\n      let headers = new Headers({ authorization: this.authService.token });\r\n      let options = new RequestOptions({ headers: headers });\r\n\r\n      return this.http.get(this.courseUrl, options)\r\n          .toPromise()\r\n          .then(response => response.json())\r\n          .catch(this.handleError);\r\n    }\r\n\r\n    getInstructorCourses(id: string): Promise<Course[]> {\r\n      // add authorization header with jwt token\r\n      let headers = new Headers({ authorization: this.authService.token });\r\n      let options = new RequestOptions({ headers: headers });\r\n\r\n      let url  = \"api/instructor-courses/\" + id;\r\n\r\n      return this.http.get(url, options)\r\n          .toPromise()\r\n          .then(response => response.json())\r\n          .catch(this.handleError);\r\n    }\r\n\r\n    getCourse(id: string) {\r\n     // add authorization header with jwt token\r\n     let headers = new Headers({ authorization: this.authService.token });\r\n     let options = new RequestOptions({ headers: headers });\r\n\r\n     return this.http.get(this.courseUrl + '/' + id, options)\r\n         .toPromise()\r\n         .then(response => response.json())\r\n         .catch(this.handleError);\r\n    }\r\n\r\n\r\n    delete(course: Course) {\r\n     // add authorization header with jwt token\r\n     let headers = new Headers({ authorization: this.authService.token });\r\n     let options = new RequestOptions({ headers: headers });\r\n\r\n     //headers.append('Content-Type', 'application/json');\r\n\r\n     let url = `${this.courseUrl}/${course.courseID}`;\r\n\r\n     return this.http\r\n         .delete(url, options)\r\n         .toPromise()\r\n         .catch(this.handleError);\r\n    }\r\n\r\n    save(course: Course): Promise<Course>  {\r\n        if (course.courseID) {\r\n            return this.put(course);\r\n        }\r\n        return this.post(course);\r\n    }\r\n\r\n    private post(course: Course): Promise<Course> {\r\n      // add authorization header with jwt token\r\n      let headers = new Headers({ authorization: this.authService.token });\r\n      let options = new RequestOptions({ headers: headers });\r\n\r\n      return this.http\r\n          .post(this.courseUrl, course, options)\r\n          .toPromise()\r\n          .then(response => response.json().data)\r\n          .catch(this.handleError);\r\n    }\r\n\r\n    private put(course: Course) {\r\n      // add authorization header with jwt token\r\n      let headers = new Headers({ authorization: this.authService.token });\r\n      let options = new RequestOptions({ headers: headers });\r\n\r\n      let url = `${this.courseUrl}/${course.courseID}`;\r\n      return this.http\r\n          .put(url, course, options)\r\n          .toPromise()\r\n          .then(() => course)\r\n          .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: any) {\r\n       console.log('An error occurred', error);\r\n       return Promise.reject(error.message || error);\r\n    }\r\n\r\n\r\n    getCampuses() {\r\n         // add authorization header with jwt token\r\n         let headers = new Headers({ authorization: this.authService.token });\r\n         let options = new RequestOptions({ headers: headers });\r\n\r\n         return this.http.get('api/getCampuses', options)\r\n             .toPromise()\r\n             .then(response => response.json())\r\n             .catch(this.handleError);\r\n        }\r\n\r\n\r\ngetProfessors() {\r\n     // add authorization header with jwt token\r\n     let headers = new Headers({ authorization: this.authService.token });\r\n     let options = new RequestOptions({ headers: headers });\r\n\r\n     return this.http.get('api/getProfessors', options)\r\n         .toPromise()\r\n         .then(response => response.json())\r\n         .catch(this.handleError);\r\n    }\r\n\r\n\r\n}\r\n"]}