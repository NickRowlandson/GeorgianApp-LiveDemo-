{"version":3,"sources":["../../client/app/components/student-enrollment/student-enrollment.component.ts"],"names":[],"mappings":"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","file":"student-enrollment.component.js","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Course } from \"../../models/course\";\r\nimport { Student } from \"../../models/Student\";\r\nimport { CourseService } from \"../../services/course.service\";\r\nimport { StudentService } from \"../../services/student.service\";\r\ndeclare var swal: any;\r\ndeclare var moment: any;\r\n\r\n@Component({\r\n    selector: 'course-selection',\r\n    templateUrl: './app/components/student-enrollment/student-enrollment.component.html',\r\n    styleUrls: ['./app/components/student-enrollment/student-enrollment.component.css']\r\n})\r\n\r\nexport class StudentEnrollmentComponent implements OnInit {\r\n    students: Student[];\r\n    courseID: any;\r\n    instructorID: any;\r\n    courseName: any;\r\n    studentTimetables: any[];\r\n    loading: boolean = true;\r\n    tempTimetableArry: any[] = [];\r\n\r\n    constructor(private studentService: StudentService, private courseService: CourseService, private route: ActivatedRoute) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.params.forEach((params: Params) => {\r\n            this.courseID = params['courseID'];\r\n            this.instructorID = params['instructorID'];\r\n            this.courseName = params['courseName'];\r\n        });\r\n        this.getStudents();\r\n    }\r\n\r\n    getStudents() {\r\n        this.studentService\r\n            .getStudents()\r\n            .then(result => {\r\n                if ((result as any).error === 'error') {\r\n                    this.students = null;\r\n                } else {\r\n                    this.students = result;\r\n                    for (let student of this.students) {\r\n                      student.fullName = student.firstName + \" \" + student.lastName;\r\n                    }\r\n                    this.getTimetables();\r\n                }\r\n            }).catch(error => error);\r\n    }\r\n\r\n    getTimetables() {\r\n        this.studentService\r\n            .getTimetables()\r\n            .then(result => {\r\n                this.studentTimetables = result;\r\n                this.compareTimetables();\r\n            })\r\n            .catch(error => error);\r\n    }\r\n\r\n    compareTimetables() {\r\n        for (let student of this.students) {\r\n            var timetable = this.studentTimetables.filter(x => x.userID === student.userID);\r\n            for (let item of timetable) {\r\n                var itemCourseID = item.courseID.toString();\r\n                if (itemCourseID === this.courseID) {\r\n                    student.enrolled = true;\r\n                }\r\n            }\r\n        }\r\n        this.loading = false;\r\n    }\r\n\r\n    checkEnrolled(student: Student) {\r\n        if (student.enrolled) {\r\n            swal({\r\n                title: 'Remove ' + student.firstName + ' ' + student.lastName + ' from ' + this.courseName + '?',\r\n                text: \"\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, remove!'\r\n            }).then(isConfirm => {\r\n                if (isConfirm) {\r\n                    this.drop(student);\r\n                }\r\n            }).catch(error => {\r\n                //console.log(\"Canceled\");\r\n            });\r\n        } else {\r\n            this.enroll(student);\r\n        }\r\n    }\r\n\r\n    enroll(student: Student) {\r\n      var startDate = moment(student.studentStartDate, \"DDD MMM YYYY h:mm:ss LT\").isValid();\r\n      var endDate = moment(student.studentEndDate, \"DDD MMM YYYY h:mm:ss LT\").isValid();\r\n        if (startDate && endDate) {\r\n          this.studentService\r\n              .courseEnroll(student.userID, student.studentStartDate, student.studentEndDate, this.courseID, this.instructorID)\r\n              .then(result => {\r\n                  student.enrolled = true;\r\n                  swal(\r\n                      this.courseName,\r\n                      '' + student.firstName + ' ' + student.lastName + ' has been succesfully enrolled.',\r\n                      'success'\r\n                  );\r\n              })\r\n              .catch(error => error);\r\n        } else {\r\n          swal(\r\n              'Whoops',\r\n              'Please input a valid start and end date for the student.',\r\n              'warning'\r\n          );\r\n        }\r\n    }\r\n\r\n    drop(student: Student) {\r\n        this.studentService\r\n            .courseDrop(student.userID, this.courseID)\r\n            .then(result => {\r\n                student.enrolled = false;\r\n            })\r\n            .catch(error => error);\r\n    }\r\n\r\n    checkStatus() {\r\n    }\r\n\r\n    goBack() {\r\n        window.history.back();\r\n    }\r\n}\r\n"]}