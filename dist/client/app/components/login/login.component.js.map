{"version":3,"sources":["../../client/app/components/login/login.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;gBAeI,wBACY,MAAc,EACd,qBAAkC;oBADlC,WAAM,GAAN,MAAM,CAAQ;oBACd,0BAAqB,GAArB,qBAAqB,CAAa;oBAN9C,UAAK,GAAQ,EAAE,CAAC;oBAChB,YAAO,GAAG,KAAK,CAAC;oBAChB,UAAK,GAAG,EAAE,CAAC;gBAIuC,CAAC;gBAEnD,iCAAQ,GAAR;oBACI,qBAAqB;oBACrB,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;gBACxC,CAAC;gBAED,8BAAK,GAAL;oBAAA,iBAYG;oBAXC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,IAAI,CAAC,qBAAqB;yBACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;yBAC/C,IAAI,CAAC,UAAA,MAAM;wBACV,IAAI,MAAM,KAAK,IAAI,EAAE;4BACjB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;yBAC/B;6BAAM;4BACH,KAAI,CAAC,KAAK,GAAG,mCAAmC,CAAC;4BACjD,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;yBACxB;oBACH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;gBACxC,CAAC;gBAED,sCAAa,GAAb;oBACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC5C,CAAC;gBA9BM,cAAc;oBAN1B,gBAAS,CAAC;wBACP,QAAQ,EAAE,OAAO;wBACjB,WAAW,EAAE,6CAA6C;wBAC1D,SAAS,EAAE,CAAC,4CAA4C,CAAC;qBAC5D,CAAC;qDAQsB,eAAM;wBACS,oCAAW;mBAPrC,cAAc,CA+B1B;gBAAD,qBAAC;aA/BD,AA+BC;;QACD,CAAC","file":"login.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/authentication.service';\r\n\r\n@Component({\r\n    selector: 'login',\r\n    templateUrl: './app/components/login/login.component.html',\r\n    styleUrls: ['./app/components/login/login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n    model: any = {};\r\n    loading = false;\r\n    error = '';\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthService) { }\r\n\r\n    ngOnInit() {\r\n        // reset login status\r\n        this.authenticationService.logout();\r\n    }\r\n\r\n    login() {\r\n        this.loading = true;\r\n        this.authenticationService\r\n        .login(this.model.username, this.model.password)\r\n        .then(result => {\r\n          if (result === true) {\r\n              this.router.navigate(['/']);\r\n          } else {\r\n              this.error = 'Username or password is incorrect';\r\n              this.loading = false;\r\n          }\r\n        }).catch(error => console.log(error));\r\n      }\r\n\r\n      goToResetPass() {\r\n        this.router.navigate(['/reset-password']);\r\n      }\r\n}\r\n"]}