var schedule = require('node-schedule');
var MailService = require("./MailService");
var sql = require('mssql');
var config = require('../config');
//runs every night at 10pm
var attendanceCheck = schedule.scheduleJob('0 15 15 * * *', function () {
    var date = new Date();
    var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
    console.log("Checking student attendance... " + str);
    var missedClasses;
    var student;
    try {
        sql.connect(config.db)
            .then(function (connection) {
            new sql.Request(connection)
                .query("SELECT * FROM Attendance ORDER BY date DESC")
                .then(function (attendanceResult) {
                new sql.Request(connection)
                    .query("SELECT * FROM Students")
                    .then(function (studentsResult) {
                    missedClasses = [];
                    for (var _i = 0, attendanceResult_1 = attendanceResult; _i < attendanceResult_1.length; _i++) {
                        var item = attendanceResult_1[_i];
                        var attendanceDate = new Date();
                        attendanceDate = item.date;
                        var formattedDate = attendanceDate.getDate();
                        if (item.attendanceValue === 'A' && formattedDate === date.getDate()) {
                            missedClasses.push(item);
                        }
                    }
                    if (missedClasses) {
                        var _loop_1 = function (item) {
                            student = studentsResult.filter(function (x) { return x.userID === item.userID; });
                            var mailOptions = {
                                from: '"Test" <ghost@test.com>',
                                to: student[0].email,
                                subject: 'SCHEDULER ✔',
                                text: '',
                                html: '<b> Hi ' + student[0].firstName + '!</b><br  />You have been absent from <insert class name here> for two or more classes in a row.' + item.date + '' // html body
                            };
                            //new MailService().scheduledMessage(mailOptions);
                        };
                        for (var _a = 0, missedClasses_1 = missedClasses; _a < missedClasses_1.length; _a++) {
                            var item = missedClasses_1[_a];
                            _loop_1(item);
                        }
                        var mailOptionsAdmin = {
                            from: '"Test" <academic.career.prep@gmail.com>',
                            to: 'nicholasrowlandson@gmail.com',
                            subject: 'SCHEDULER ✔',
                            text: '',
                            html: '<b> Hi admin!</b><br  />There were ' + missedClasses.length + ' emails sent out due to missed classes.' // html body
                        };
                        new MailService().sendMessage("Scheduled Message", mailOptionsAdmin);
                        console.log("TOTAL EMAILS SENT: " + missedClasses.length);
                    }
                    else {
                        console.log("No missed classes");
                    }
                }).catch(function (err) {
                    console.log("Get all attendance " + err);
                });
            }).catch(function (err) {
                console.log("Get all attendance " + err);
            });
        }).catch(function (err) {
            console.log(err);
        });
    }
    catch (err) {
        console.log(err);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
