"use strict";
var bcrypt = require("bcrypt");
var AuthController = require("../controllers/AuthController");
var MailService = require("../services/MailService");
var ActivityService = require("../services/ActivityService");
var sql = require('mssql');
var auth = ["Admin"];
var config = require('../config');
var db = config.db;
var mail = config.mail;
var site_settings = config.site_settings;
/*
    The staff controller communicates with the client
    side in order to manage all staff CRUD operations.
*/
var StaffController = /** @class */ (function () {
    function StaffController() {
    }
    /* Create new staff record */
    StaffController.prototype.create = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var randomstring = Math.random().toString(36).slice(-8);
                    randomstring = randomstring.charAt(0).toUpperCase() + randomstring.slice(1);
                    var salt = bcrypt.genSaltSync(10);
                    // Hash the password with the salt
                    var password = bcrypt.hashSync(randomstring, salt);
                    req.body.password = password;
                    req.body.username = req.body.firstName + req.body.lastName;
                    req.body.username = req.body.username.toLowerCase();
                    req.body.username = req.body.username.replace(/\s+/g, '');
                    var staff = req.body;
                    sql.connect(db)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query("SELECT * FROM Users")
                            .then(function (users) {
                            var validated = true;
                            var error;
                            var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                            var emailValidation = re.test(staff.email);
                            for (var _i = 0, users_1 = users; _i < users_1.length; _i++) {
                                var user = users_1[_i];
                                if (user.username === staff.username) {
                                    validated = false;
                                    error = "Username is already in use.";
                                    break;
                                }
                                else if (user.email === staff.email) {
                                    validated = false;
                                    error = "Email is already in use.";
                                    break;
                                }
                            }
                            if (!emailValidation) {
                                res.send({ result: "invalid", title: "Invalid Input", msg: "Incorrect email format.", serverMsg: "" });
                            }
                            else if (!validated) {
                                res.send({ result: "invalid", title: "Invalid Input", msg: error, serverMsg: "" });
                            }
                            else {
                                new sql.Request(connection)
                                    .query("INSERT INTO Users VALUES ('" + staff.username + "','" + staff.email + "','" + staff.password + "','" + staff.userType + "','false','" + staff.notify + "')")
                                    .then(function () {
                                    new sql.Request(connection)
                                        .query("SELECT userID FROM Users WHERE username = '" + staff.username + "' AND password = '" + staff.password + "'")
                                        .then(function (id) {
                                        new sql.Request(connection)
                                            .query("INSERT INTO Staff VALUES ('" + id[0].userID + "','" + staff.firstName + "', '" + staff.lastName + "')")
                                            .then(function () {
                                            // setup email data with unicode symbols
                                            if (staff.notify) {
                                                var mailOptions = {
                                                    from: mail.user,
                                                    to: staff.email,
                                                    subject: 'Welcome!',
                                                    text: '',
                                                    html: 'Your username is <b>' + staff.username + '</b> and here is your new temporary password: <b>' + randomstring + '</b><br /> Please login at ' + site_settings.url + '  <br /><br /> Thankyou' // html body
                                                };
                                                new MailService().sendMessage("Welcome Staff", mailOptions);
                                            }
                                            new ActivityService().reportActivity(staff.userType + ' User Created', 'success', id[0].userID, req.body.firstName + ' ' + req.body.lastName + ' has been created as a new' + staff.userType + ' user. (Notify: ' + staff.notify + ')');
                                            res.send({ result: "success", title: "New User Created!", msg: "Staff user has been successfully created!", serverMsg: "" });
                                        }).catch(function (err) {
                                            console.log("insert staff " + err);
                                            res.send({ result: "error", title: "Error", msg: "There was an error inserting a new staff record.", serverMsg: err });
                                        });
                                    }).catch(function (err) {
                                        console.log("get user " + err);
                                        res.send({ result: "error", title: "Error", msg: "There was an error getting the userID.", serverMsg: err });
                                    });
                                }).catch(function (err) {
                                    console.log("insert user " + err);
                                    res.send({ result: "error", title: "Error", msg: "There was an error inserting a new user record.", serverMsg: err });
                                });
                            }
                        }).catch(function (err) {
                            console.log("select all users " + err);
                            res.send({ result: "error", title: "Error", msg: "There was an error selecting all users.", serverMsg: err });
                        });
                    }).catch(function (err) {
                        console.log("DB Connection error: " + err);
                        res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                    });
                }
            });
        }
        catch (err) {
            console.log("Create new staff record: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error creating a new staff user.", serverMsg: err });
        }
    };
    /* Update staff record by ID */
    StaffController.prototype.update = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var user = req.body;
                    var _id = req.params._id;
                    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    var emailValidation = re.test(user.email);
                    if (!emailValidation) {
                        res.send({ result: "invalid", title: "Invalid Input", msg: "Incorrect email format.", serverMsg: "" });
                    }
                    else {
                        sql.connect(db)
                            .then(function (connection) {
                            new sql.Request(connection)
                                .query("SELECT userID, username, email FROM Users")
                                .then(function (users) {
                                var validated = true;
                                var error;
                                var currentUsername = users.filter(function (x) { return x.userID === user.userID; });
                                currentUsername = currentUsername[0].username;
                                users = users.filter(function (x) { return x.userID !== user.userID; });
                                user.username = user.firstName + user.lastName;
                                user.username = user.username.toLowerCase();
                                user.username = user.username.replace(/\s+/g, '');
                                for (var _i = 0, users_2 = users; _i < users_2.length; _i++) {
                                    var record = users_2[_i];
                                    if (record.username === user.username) {
                                        validated = false;
                                        error = "Username is already in use.";
                                        break;
                                    }
                                    else if (record.email === user.email) {
                                        validated = false;
                                        error = "Email is already in use.";
                                        break;
                                    }
                                }
                                if (!validated) {
                                    res.send({ result: "invalid", title: "Invalid Input", msg: error, serverMsg: "" });
                                }
                                else {
                                    new sql.Request(connection)
                                        .query("SELECT userID, username, email, active, notify FROM Users WHERE userID = '" + _id + "'")
                                        .then(function (userInfo) {
                                        if (!userInfo[0].notify && !userInfo[0].active && user.notify) {
                                            var randomstring = Math.random().toString(36).slice(-8);
                                            randomstring = randomstring.charAt(0).toUpperCase() + randomstring.slice(1);
                                            var salt = bcrypt.genSaltSync(10);
                                            // Hash the password with the salt
                                            var password = bcrypt.hashSync(randomstring, salt);
                                            req.body.password = password;
                                            new sql.Request(connection)
                                                .query("UPDATE Users SET password='" + password + "' WHERE userID = '" + _id + "'")
                                                .then(function () {
                                                var mailOptions = {
                                                    from: mail.user,
                                                    to: user.email,
                                                    subject: 'Welcome!',
                                                    text: '',
                                                    html: 'Your username is <b>' + userInfo[0].username + '</b> and here is your new temporary password: <b>' + randomstring + '</b><br /> Please login at ' + site_settings.url + '  <br /><br /> Thankyou' // html body
                                                };
                                                new MailService().sendMessage("Welcome Staff", mailOptions);
                                            }).catch(function (err) {
                                                console.log("Update user password " + err);
                                                res.send({ result: "error", title: "Error", msg: "There was an error updating the users password.", serverMSg: err });
                                            });
                                        }
                                        new sql.Request(connection)
                                            .query("UPDATE Staff SET firstName='" + user.firstName + "', lastName='" + user.lastName + "' WHERE userID = '" + _id + "'")
                                            .then(function () {
                                            new sql.Request(connection)
                                                .query("UPDATE Users SET userType='" + user.userType + "', username='" + user.username + "', email='" + user.email + "', notify='" + user.notify + "' WHERE userID = '" + _id + "'")
                                                .then(function () {
                                                if (currentUsername != user.username && user.notify) {
                                                    var mailOptions = {
                                                        from: mail.user,
                                                        to: user.email,
                                                        subject: 'Username Update!',
                                                        text: '',
                                                        html: 'Your username has been changed to <b>' + user.username + '</b>.<br /><br /> Login at ' + site_settings.url + '  <br /><br /> Thankyou' // html body
                                                    };
                                                    new MailService().sendMessage("Staff Username Update", mailOptions);
                                                }
                                                new ActivityService().reportActivity(user.userType + 'User Updated', 'success', userInfo.userID, user.userType + ' user has been updated. (Notify: ' + user.notify + ')');
                                                res.send({ result: "success", title: "Update Success!", msg: "Staff user updated!", serverMsg: "" });
                                            }).catch(function (err) {
                                                console.log("Update user " + err);
                                                res.send({ result: "error", title: "Error", msg: "There was an error updating this users information.", serverMsg: err });
                                            });
                                        }).catch(function (err) {
                                            console.log("Update staff " + err);
                                            res.send({ result: "error", title: "Error", msg: "There was an error updating this users information.", serverMsg: err });
                                        });
                                    }).catch(function (err) {
                                        console.log("Select notify and active from user " + err);
                                        res.send({ result: "error", title: "Error", msg: "There was an error retrieving 'notify' and 'active' info for this user.", serverMsg: err });
                                    });
                                }
                            }).catch(function (err) {
                                console.log("Error - Select username and email from user " + err);
                                res.send({ result: "error", title: "Error", msg: "There was an error retrieving 'username' and 'email' for this user.", serverMsg: err });
                            });
                        }).catch(function (err) {
                            console.log("DB Connection error: " + err);
                            res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                        });
                    }
                }
            });
        }
        catch (err) {
            console.log("Update staff record by ID: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error updating this users information.", serverMsg: err });
        }
    };
    /* Delete selected record from Staff table by ID  */
    StaffController.prototype.delete = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var _id = req.params._id;
                    sql.connect(db)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query("DELETE FROM Staff WHERE userID = '" + _id + "'")
                            .then(function () {
                            new sql.Request(connection)
                                .query("DELETE FROM Users WHERE userID = '" + _id + "'")
                                .then(function () {
                                new ActivityService().reportActivity('Faculty User deleted', 'success', _id, 'Faculty user has been deleted.');
                                res.send({ result: "success", title: "User Deleted", msg: "Staff user deleted successfully.", serverMsg: "" });
                            }).catch(function (err) {
                                console.log("Delete user with id " + _id + ". " + err);
                                res.send({ result: "error", title: "Error", msg: "There was an error deleting this user from the users table.", serverMsg: err });
                            });
                        }).catch(function (err) {
                            console.log("Delete staff with id " + _id + ". " + err);
                            res.send({ result: "error", title: "Error", msg: "There was an error deleting this user from the staff table.", serverMsg: err });
                        });
                    }).catch(function (err) {
                        console.log("DB Connection error: " + err);
                        res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                    });
                }
            });
        }
        catch (err) {
            console.log("Delete selected record from Staff table by ID: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error deleting this user.", serverMsg: err });
        }
    };
    /* Get all staff records from Staff table */
    StaffController.prototype.retrieve = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    sql.connect(db)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query("SELECT Staff.firstName, Staff.lastName, Users.userID, Users.userType, Users.email, Users.active, Users.username, Users.notify FROM Staff LEFT JOIN Users ON Users.userID = Staff.userID WHERE username != 'adminuser'")
                            .then(function (recordset) {
                            res.send(recordset);
                        }).catch(function (err) {
                            console.log("Select all staff " + err);
                            res.send({ result: "error", title: "Error", msg: "There was an error retrieving all staff information.", serverMsg: err });
                        });
                    }).catch(function (err) {
                        console.log("DB Connection error: " + err);
                        res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                    });
                }
            });
        }
        catch (err) {
            console.log("Get all staff records from Staff table: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error retrieving all staff information.", serverMsg: err });
        }
    };
    StaffController.prototype.getSiteActivity = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    sql.connect(db)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query('SELECT * FROM SiteActivity ORDER BY id DESC')
                            .then(function (recordset) {
                            res.send(recordset);
                        }).catch(function (err) {
                            console.log("Error - Select all site activity: " + err);
                            res.send({ result: "error", title: "Error", msg: "There was an error retrieving all site activity.", serverMsg: err });
                        });
                    }).catch(function (err) {
                        console.log("DB Connection error: " + err);
                        res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                    });
                }
            });
        }
        catch (err) {
            console.log("Error - Get site activity: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error retrieving all site activity.", serverMsg: err });
        }
    };
    /* Get staff info by ID */
    StaffController.prototype.findById = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var _id = req.params._id;
                    sql.connect(db)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query("SELECT Staff.userID, firstName, lastName, email, userType, active, notify FROM Staff INNER JOIN Users ON Staff.userID = Users.userID WHERE Staff.userID = '" + _id + "'")
                            .then(function (recordset) {
                            res.send(recordset[0]);
                        }).catch(function (err) {
                            console.log("Select staff info by id " + err);
                            res.send({ result: "error", title: "Error", msg: "There was an error getting this users information.", serverMsg: err });
                        });
                    }).catch(function (err) {
                        console.log("DB Connection error: " + err);
                        res.send({ result: "error", title: "Connection Error", msg: "There was an error connecting to the database.", serverMsg: err });
                    });
                }
            });
        }
        catch (err) {
            console.log("Get staff info by ID: " + err);
            res.send({ result: "error", title: "Error", msg: "There was an error getting this users information.", serverMsg: err });
        }
    };
    return StaffController;
}());
module.exports = StaffController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
