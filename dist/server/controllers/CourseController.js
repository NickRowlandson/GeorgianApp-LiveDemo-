"use strict";
var AuthController = require("../controllers/AuthController");
var sql = require('mssql');
var auth = ["Admin"];
var config = {
    user: 'NickRowlandson',
    password: 'georgianTest1',
    server: 'nr-comp2007.database.windows.net',
    database: 'GeorgianApp',
    options: {
        encrypt: true // Use this if you're on Windows Azure
    }
};
var CourseController = (function () {
    function CourseController() {
    }
    // select
    CourseController.prototype.retrieve = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    sql.connect(config)
                        .then(function (connection) {
                        new sql.Request(connection)
                            .query('SELECT * FROM Course')
                            .then(function (recordset) {
                            res.send(recordset);
                        }).catch(function (err) {
                            res.send({ "error": "error" });
                            console.log("Select all course " + err);
                        });
                    }).catch(function (err) {
                        console.log(err);
                        res.send({ "error": "error in your request" });
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    CourseController.prototype.delete = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var _id = req.params._id;
                    sql.connect(config).then(function () {
                        return (_a = ["DELETE FROM Course WHERE courseID = ", ""], _a.raw = ["DELETE FROM Course WHERE courseID = ", ""], sql.query(_a, _id));
                        var _a;
                    }).then(function (result) {
                        console.dir("sucess");
                        res.send({ "success": "success" });
                    }).catch(function (err) {
                        // ... error checks
                        res.send({ "error": "error" });
                        console.log("delete course" + err);
                    });
                    sql.on('error', function (err) {
                        // ... error handler
                        console.log(err);
                        res.send({ "error": "error in your request" });
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    CourseController.prototype.update = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var course = req.body;
                    var _id = req.params._id;
                    sql.connect("mssql://NickRowlandson:georgianTest1@nr-comp2007.database.windows.net/GeorgianApp?encrypt=true").then(function () {
                        new sql.Request().query("UPDATE Course SET courseName='" + course.courseName + "', classroom='" + course.classroom + "' WHERE courseID = '" + _id + "'").then(function () {
                            res.send({ "success": "success" });
                        }).catch(function (err) {
                            res.send({ "error": "error" });
                            console.log("Update course " + err);
                        });
                    }).catch(function (err) {
                        console.log(err);
                        res.send({ "error": "error in your request" });
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    CourseController.prototype.findById = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    var _id = req.params._id;
                    sql.connect(config).then(function () {
                        return (_a = ["SELECT * FROM Course where courseId=", ""], _a.raw = ["SELECT * FROM Course where courseId=", ""], sql.query(_a, _id));
                        var _a;
                    }).then(function (result) {
                        console.dir(result);
                        res.send(result);
                    }).catch(function (err) {
                        // ... error checks
                        res.send({ "error": "error" });
                        console.log("Select all course " + err);
                    });
                    sql.on('error', function (err) {
                        // ... error handler
                        console.log(err);
                        res.send({ "error": "error in your request" });
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    // insert
    CourseController.prototype.create = function (req, res) {
        try {
            new AuthController().authUser(req, res, {
                requiredAuth: auth, done: function () {
                    // get course from req url
                    var course = req.body;
                    sql.connect(config).then(function () {
                        return (_a = ["INSERT INTO Course (courseName,professorId,campusId,classroom, courseStart,courseEnd) VALUES(", ",'Di','1',", ",'2017-05-17 13:00:00','2017-05-17 17:00:00')"], _a.raw = ["INSERT INTO Course (courseName,professorId,campusId,classroom, courseStart,courseEnd) VALUES(", ",'Di','1',", ",'2017-05-17 13:00:00','2017-05-17 17:00:00')"], sql.query(_a, course.courseName, course.classroom));
                        var _a;
                    }).then(function (result) {
                        console.dir("insert " + course.courseName + " complete");
                        res.send({ "success": "success" });
                    }).catch(function (err) {
                        // ... error checks
                        res.send({ "error": "error" });
                        console.log("insert course " + err);
                    });
                    sql.on('error', function (err) {
                        // ... error handler
                        console.log(err);
                        res.send({ "error": "error in your request" });
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return CourseController;
}());
module.exports = CourseController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
