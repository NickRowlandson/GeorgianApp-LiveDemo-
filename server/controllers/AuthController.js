"use strict";
var jwt = require("jsonwebtoken");
var bcrypt = require("bcrypt");
var sql = require('mssql');
var AuthController = (function () {
    function AuthController() {
    }
    // Login Authentication
    AuthController.prototype.auth = function (req, res) {
        try {
            var _username = req.body.username;
            var _password = req.body.password;
            var response;
            sql.connect("mssql://NickRowlandson:georgianTest1@nr-comp2007.database.windows.net/GeorgianApp?encrypt=true").then(function () {
                new sql.Request().query('SELECT * FROM Users').then(function (user) {
                    for (var object in user) {
                        if (_username === user[object].username && bcrypt.compareSync(_password, user[object].password)) {
                            var token = jwt.sign({ userid: user[object].userID }, "f9b574a2fc0d77986cb7ebe21a0dea480f5f21931abfa5cf329a45ecc0c8e1ff");
                            var statusToken = { status: 200, body: { token: token, username: user[object].username, userType: user[object].userType } };
                            response = JSON.stringify(statusToken);
                            res.send(response);
                            break;
                        }
                    }
                }).catch(function (err) {
                    response = { "error": err };
                    res.send(response);
                });
            }).catch(function (err) {
                response = { "error": err };
                res.send(response);
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    //Decode token and check if user is authorized
    AuthController.prototype.authUser = function (req, res, data) {
        try {
            if (req.headers) {
                jwt.verify(req.headers.authorization, 'f9b574a2fc0d77986cb7ebe21a0dea480f5f21931abfa5cf329a45ecc0c8e1ff', function (err, decoded) {
                    var _id = decoded.userid;
                    sql.connect("mssql://NickRowlandson:georgianTest1@nr-comp2007.database.windows.net/GeorgianApp?encrypt=true").then(function () {
                        new sql.Request().query("SELECT * FROM Users WHERE userID = '" + _id + "'").then(function (user) {
                            if (data.requiredAuth.indexOf(user[0].userType) > -1) {
                                data.done();
                            }
                            else {
                                res.send({ status: '403' });
                            }
                        }).catch(function (err) {
                            res.send({ "error": "error" });
                            console.log("Authenticate user 'Select staff' statement " + err);
                        });
                    });
                });
            }
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return AuthController;
}());
module.exports = AuthController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zcmMvY29udHJvbGxlcnMvQXV0aENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGtDQUFxQztBQUNyQywrQkFBa0M7QUFDbEMsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTNCO0lBQUE7SUE4REEsQ0FBQztJQTVEQyx1QkFBdUI7SUFDdkIsNkJBQUksR0FBSixVQUFLLEdBQW9CLEVBQUUsR0FBcUI7UUFDOUMsSUFBSSxDQUFDO1lBQ0gsSUFBSSxTQUFTLEdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDMUMsSUFBSSxTQUFTLEdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDMUMsSUFBSSxRQUFRLENBQUM7WUFFYixHQUFHLENBQUMsT0FBTyxDQUFDLGdHQUFnRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNqSCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFJO29CQUM3RCxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUN4QixFQUFFLENBQUEsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQSxDQUFDOzRCQUM5RixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxrRUFBa0UsQ0FBQyxDQUFDOzRCQUMxSCxJQUFJLFdBQVcsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUs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SUFDSCxxQkFBQztBQUFELENBOURBLEFBOERDLElBQUE7QUFDRCxpQkFBUyxjQUFjLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xyXG5pbXBvcnQgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XHJcbmltcG9ydCBiY3J5cHQgPSByZXF1aXJlKCdiY3J5cHQnKTtcclxudmFyIHNxbCA9IHJlcXVpcmUoJ21zc3FsJyk7XHJcblxyXG5jbGFzcyBBdXRoQ29udHJvbGxlciB7XHJcblxyXG4gIC8vIExvZ2luIEF1dGhlbnRpY2F0aW9uXHJcbiAgYXV0aChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICB2YXIgX3VzZXJuYW1lOiBzdHJpbmcgPSByZXEuYm9keS51c2VybmFtZTtcclxuICAgICAgdmFyIF9wYXNzd29yZDogc3RyaW5nID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcbiAgICAgIHZhciByZXNwb25zZTtcclxuXHJcbiAgICAgIHNxbC5jb25uZWN0KFwibXNzcWw6Ly9OaWNrUm93bGFuZHNvbjpnZW9yZ2lhblRlc3QxQG5yLWNvbXAyMDA3LmRhdGFiYXNlLndpbmRvd3MubmV0L0dlb3JnaWFuQXBwP2VuY3J5cHQ9dHJ1ZVwiKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG5ldyBzcWwuUmVxdWVzdCgpLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIFVzZXJzJykudGhlbihmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG9iamVjdCBpbiB1c2VyKSB7XHJcbiAgICAgICAgICAgICAgaWYoX3VzZXJuYW1lID09PSB1c2VyW29iamVjdF0udXNlcm5hbWUgJiYgYmNyeXB0LmNvbXBhcmVTeW5jKF9wYXNzd29yZCwgdXNlcltvYmplY3RdLnBhc3N3b3JkKSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBqd3Quc2lnbih7IHVzZXJpZDogdXNlcltvYmplY3RdLnVzZXJJRCB9LCBcImY5YjU3NGEyZmMwZDc3OTg2Y2I3ZWJlMjFhMGRlYTQ4MGY1ZjIxOTMxYWJmYTVjZjMyOWE0NWVjYzBjOGUxZmZcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzVG9rZW4gPSB7IHN0YXR1czogMjAwLCBib2R5OiB7IHRva2VuOiB0b2tlbiwgdXNlcm5hbWU6IHVzZXJbb2JqZWN0XS51c2VybmFtZSwgdXNlclR5cGU6IHVzZXJbb2JqZWN0XS51c2VyVHlwZSB9IH07XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IEpTT04uc3RyaW5naWZ5KHN0YXR1c1Rva2VuKTtcclxuICAgICAgICAgICAgICAgIHJlcy5zZW5kKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IHtcImVycm9yXCI6IGVycn07XHJcbiAgICAgICAgICAgIHJlcy5zZW5kKHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICByZXNwb25zZSA9IHtcImVycm9yXCI6IGVycn07XHJcbiAgICAgICAgICByZXMuc2VuZChyZXNwb25zZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICByZXMuc2VuZCh7XCJlcnJvclwiOiBcImVycm9yIGluIHlvdXIgcmVxdWVzdFwifSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL0RlY29kZSB0b2tlbiBhbmQgY2hlY2sgaWYgdXNlciBpcyBhdXRob3JpemVkXHJcbiAgYXV0aFVzZXIocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgZGF0YTogT2JqZWN0KTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZihyZXEuaGVhZGVycykge1xyXG4gICAgICAgIGp3dC52ZXJpZnkocmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiwgJ2Y5YjU3NGEyZmMwZDc3OTg2Y2I3ZWJlMjFhMGRlYTQ4MGY1ZjIxOTMxYWJmYTVjZjMyOWE0NWVjYzBjOGUxZmYnLCBmdW5jdGlvbihlcnIsIGRlY29kZWQpIHtcclxuICAgICAgICAgIHZhciBfaWQgPSBkZWNvZGVkLnVzZXJpZDtcclxuICAgICAgICAgIHNxbC5jb25uZWN0KFwibXNzcWw6Ly9OaWNrUm93bGFuZHNvbjpnZW9yZ2lhblRlc3QxQG5yLWNvbXAyMDA3LmRhdGFiYXNlLndpbmRvd3MubmV0L0dlb3JnaWFuQXBwP2VuY3J5cHQ9dHJ1ZVwiKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgc3FsLlJlcXVlc3QoKS5xdWVyeShcIlNFTEVDVCAqIEZST00gVXNlcnMgV0hFUkUgdXNlcklEID0gJ1wiK19pZCtcIidcIikudGhlbihmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgICAgaWYoZGF0YS5yZXF1aXJlZEF1dGguaW5kZXhPZih1c2VyWzBdLnVzZXJUeXBlKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmRvbmUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7c3RhdHVzOiAnNDAzJ30pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7XCJlcnJvclwiOiBcImVycm9yXCJ9KTsgY29uc29sZS5sb2coXCJBdXRoZW50aWNhdGUgdXNlciAnU2VsZWN0IHN0YWZmJyBzdGF0ZW1lbnQgXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgcmVzLnNlbmQoe1wiZXJyb3JcIjogXCJlcnJvciBpbiB5b3VyIHJlcXVlc3RcIn0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5leHBvcnQgPSBBdXRoQ29udHJvbGxlcjtcclxuIl19
